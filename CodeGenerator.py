## Sean Bloomsburg
## sbloomsburg@gmail.com
##
## This module oversees the construction
## of assembly code from the intermediate code
## generated by the parser and semantic analysis.
##

import ClearRegister
import copy
import ProcedureDeclaration
import RegisterAllocation

def generate(intermediate_code):
    assembly_code = []
    global_lines = []
    data_lines = []
    data_lines.append("\t.section '.data'")
    undeclared_lines = []
    undeclared_lines.append("\t.section '.bss'")
    undeclared_lines.append("\t.align 4")
    read_only_date_lines = []
    read_only_date_lines.append("\t.section '.rodata'")

    printed = 0
    clear = False
    compare_list = []
    
    register_dictionary = {}
    for i in range(8):
        register_dictionary["%l"+str(i)] = "EMPTY"
        
    global_register_dictionary = {}
    for i in range(1,8):
        global_register_dictionary["%g"+str(i)] = "EMPTY"
        
    reverse_register_dictionary = {}
    procedure_declaration = False
    incoming_variable = 0
    current_label = "None"
    flag20 = False
    if ("20", "Flag", "-" , "-") in intermediate_code:
        flag20 = True
    
    for i in range(len(intermediate_code)):
        tuple = intermediate_code[i]
        result = tuple[0]
        operation = tuple[1]
        operand1 = tuple[2]
        operand2 = tuple[3]
        comment =  "\t\t ! (" + str(result) + ", " + str(operation) + ", " + str(operand1) + ", " + str(operand2) + ")"

        if global_lines != []:
            print global_lines[len(global_lines)-1]
            
        if procedure_declaration == True:
            if global_lines != []:
                print global_lines[len(global_lines)-1]
            procedure_declaration_output = ProcedureDeclaration.generate(tuple, global_lines, register_dictionary, reverse_register_dictionary, clear, incoming_variable)
            global_lines = procedure_declaration_output[0]
            register_dictionary = procedure_declaration_output[1]
            reverse_register_dictionary = procedure_declaration_output[2]
            clear = procedure_declaration_output[3]
            incoming_variable = procedure_declaration_output[4]

        if flag20 == True:
            for register, contents in register_dictionary.items():
                print '{0:10}{1:5}'.format(register, contents)
        
        if operation == 'LABEL':
            if result == "MAIN":
                line = "\t.section '.text'"
                global_lines.append(line)
                line = "\t.global main"
                global_lines.append(line)
                line = "main: "
                global_lines.append(line)
                line = "\tsave    %sp, -120, %sp"
                global_lines.append('{0:20}{1:5}'.format(line, comment))
            else:
                if current_label == "None":
                    current_label = result
                line = str(result) + ":"
                global_lines.append(line)
                                        
        if operation == 'INITIALIZEMEMORY':
            ## Variables with initial values
            if operand1 != "-":
                if operand2 == "-":
                    line = str(result) + ":	.word " + str(operand1)
                    data_lines.append('{0:20}{1:5}'.format(line, comment))
                    
            ## Variables without initial values
            if operand1 == "-":
                if operand2 == "-":
                    line = str(result) + ":	.skip 4"
                    undeclared_lines.append('{0:20}{1:5}'.format(line, comment))

            ## Variables without initial values
            if operand1 == "-":
                if operand2 == "-":
                    line = str(result) + ":	.skip 4"
                    undeclared_lines.append('{0:20}{1:5}'.format(line, comment))

        if operation == 'SUBLOAD':
            values = []
            if operand2 == "-":
                if type(operand1) == str:
                    if operand1 in reverse_register_dictionary:
                        operand1 = reverse_register_dictionary[operand1]
                else:
                    values = []
                    values.append(operand1)
                if values != []:
                    register_allocation_output = RegisterAllocation.allocate(values, register_dictionary, reverse_register_dictionary, clear)
                    values = register_allocation_output[0]
                    register_dictionary = copy.copy(register_allocation_output[1])
                    reverse_register_dictionary = copy.copy(register_allocation_output[2])
                    clear = register_allocation_output[3]
                    operand1 = values[0]
                    current_register = reverse_register_dictionary[operand1]
                    if clear == True:
                        line = "\tclr " + str(operand1)
                        alternative_key = register_dictionary[current_register]
                        reverse_register_dictionary.pop(alternative_key)
                        register_dictionary[current_register] = "EMPTY"
                        global_lines.append(line)
                        clear = False
                    line = "\tset " + str(operand1) + ", " + str(current_register)
                    global_lines.append(line)

                if result in reverse_register_dictionary:
                   current_register = reverse_register_dictionary[result]
                else:
                    values = []
                    values.append(result)
                    register_allocation_output = RegisterAllocation.allocate(values, register_dictionary, reverse_register_dictionary, clear)
                    values = register_allocation_output[0]
                    register_dictionary = copy.copy(register_allocation_output[1])
                    reverse_register_dictionary = copy.copy(register_allocation_output[2])
                    clear = register_allocation_output[3]
                    current_register = reverse_register_dictionary[result]
                    if clear == True:
                        line = "\tclr " + str(operand1)
                        alternative_key = register_dictionary[current_register]
                        reverse_register_dictionary.pop(alternative_key)
                        register_dictionary[current_register] = "EMPTY"
                        global_lines.append(line)
                        clear = False
                    line = "\tset " + str(operand1) + ", " + str(current_register)
                    global_lines.append(line)
                line = "\tld [" + current_register + "], " + str(current_register)
                global_lines.append('{0:20}{1:5}'.format(line, comment))

            else:
                values = []
                if operand1 in reverse_register_dictionary:
                    operand1 = reverse_register_dictionary[operand1]
                else:
                    if type(operand1) == str:
                        values.append(operand1)
                        register_allocation_output = RegisterAllocation.allocate(values, register_dictionary, reverse_register_dictionary, clear)
                        values = register_allocation_output[0]    
                        register_dictionary = copy.copy(register_allocation_output[1])
                        reverse_register_dictionary = copy.copy(register_allocation_output[2])
                        clear = register_allocation_output[3]
                        current_register = reverse_register_dictionary[operand1]
                        values = []

                if operand2 in reverse_register_dictionary:
                    operand2 = reverse_register_dictionary[operand2]
                else:
                    if type(operand2) == str:
                        values.append(operand2)
                        register_allocation_output = RegisterAllocation.allocate(values, register_dictionary, reverse_register_dictionary, clear)
                        values = register_allocation_output[0]    
                        register_dictionary = copy.copy(register_allocation_output[1])
                        reverse_register_dictionary = copy.copy(register_allocation_output[2])
                        clear = register_allocation_output[3]
                        result = values[0]
                        current_register = reverse_register_dictionary[result]
                        values = []

                if result in reverse_register_dictionary:
                    result = reverse_register_dictionary[result]
                else:
                    if type(result) == str:
                        values.append(result)
                        register_allocation_output = RegisterAllocation.allocate(values, register_dictionary, reverse_register_dictionary, clear)
                        values = register_allocation_output[0]    
                        register_dictionary = copy.copy(register_allocation_output[1])
                        reverse_register_dictionary = copy.copy(register_allocation_output[2])
                        clear = register_allocation_output[3]
                        result = values[0]
                        current_register = reverse_register_dictionary[result]
                        values = []                    
                offset = "I$Offset"
                values.append(offset)
                if values != []:
                    register_allocation_output = RegisterAllocation.allocate(values, register_dictionary, reverse_register_dictionary, clear)
                    values = register_allocation_output[0]    
                    register_dictionary = copy.copy(register_allocation_output[1])
                    reverse_register_dictionary = copy.copy(register_allocation_output[2])
                    offset = reverse_register_dictionary[offset]

                line = "\tsll " + str(operand2) + ", 2, " + str(offset)
                global_lines.append(line)
                line = "\tld [" + str(operand1) + str(offset) + "], " + str(result)
                global_lines.append('{0:20}{1:5}'.format(line, comment))

        if operation == 'SUBSTORE':
            values = []
            if operand2 == "-":
                if operand1 in reverse_register_dictionary:
                    operand1 = reverse_register_dictionary[operand1]
                if result in reverse_register_dictionary:
                    result = reverse_register_dictionary[result]
                else:
                    values.append(result)
                    register_allocation_output = RegisterAllocation.allocate(values, register_dictionary, reverse_register_dictionary, clear)
                    values = register_allocation_output[0]    
                    register_dictionary = copy.copy(register_allocation_output[1])
                    reverse_register_dictionary = copy.copy(register_allocation_output[2])
                    clear = register_allocation_output[3]
                    result = values[0]
                    current_register = reverse_register_dictionary[result]
                    values = []                    
                    if clear == True:
                        line = "\tclr " + str(current_register)
                        alternative_key = register_dictionary[current_register]
                        reverse_register_dictionary.pop(alternative_key)
                        register_dictionary[current_register] = "EMPTY"
                        global_lines.append(line)
                        clear = False

                    line = "\tset " + str(result) + ", " + str(current_register)
                    global_lines.append(line)
                line = "\tst " + str(operand1) + ", " + "[" + str(current_register) + "]"
                global_lines.append('{0:20}{1:5}'.format(line, comment))

            else:
                values = []
                if operand1 in reverse_register_dictionary:
                    operand1 = reverse_register_dictionary[operand1]

                if operand2 in reverse_register_dictionary:
                    operand2 = reverse_register_dictionary[operand2]

                if result in reverse_register_dictionary:
                    result = reverse_register_dictionary[result]
                else:
                    values = []
                    if type(result) == str:
                        values.append(result)
                        register_allocation_output = RegisterAllocation.allocate(values, register_dictionary, reverse_register_dictionary, clear)
                        values = register_allocation_output[0]    
                        register_dictionary = copy.copy(register_allocation_output[1])
                        reverse_register_dictionary = copy.copy(register_allocation_output[2])
                        clear = register_allocation_output[3]
                        result = values[0]
                        result = reverse_register_dictionary[result] 
                        values = []
                        if clear == True:
                            line = "\tclr " + str(result)
                            alternative_key = register_dictionary[result]
                            reverse_register_dictionary.pop(alternative_key)
                            register_dictionary[result] = "EMPTY"
                            global_lines.append(line)
                            clear = False
                offset = "I$Offset"
                if offset in reverse_register_dictionary:
                    offset = reverse_register_dictionary[offset]
                else:
                    values = []
                    values.append(offset)
                    if values != []:
                        register_allocation_output = RegisterAllocation.allocate(values, register_dictionary, reverse_register_dictionary, clear)
                        values = register_allocation_output[0]    
                        register_dictionary = copy.copy(register_allocation_output[1])
                        reverse_register_dictionary = copy.copy(register_allocation_output[2])
                        clear = register_allocation_output[3]
                        offset = values[0]
                        offset = reverse_register_dictionary[offset]
                        values = []

                line = "\tsll " + str(operand1) + ", 2, " + str(offset)
                global_lines.append('{0:20}{1:5}'.format(line, comment))
                line = "\tst " + str(operand2) + ", " + "[" + str(result) + " + " + str(offset) + "]"
                global_lines.append('{0:20}{1:5}'.format(line, comment))

        if operation == 'STORECONSTANT':
            if operand1 in reverse_register_dictionary:
                current_register = reverse_register_dictionary[operand1]
            else:    
                values = []
                values.append(operand1)
                register_allocation_output = RegisterAllocation.allocate(values, register_dictionary, reverse_register_dictionary, clear)
                values = register_allocation_output[0]
                register_dictionary = copy.copy(register_allocation_output[1])
                reverse_register_dictionary = copy.copy(register_allocation_output[2])
                clear = register_allocation_output[3]
                current_register = reverse_register_dictionary[operand1]
                if clear == True:
                    line = "\tclr " + str(current_register)
                    alternative_key = register_dictionary[current_register]
                    reverse_register_dictionary.pop(alternative_key)
                    register_dictionary[current_register] = "EMPTY"
                    global_lines.append(line)
                    clear = False                                
            line = "\tst " + str(operand1) + ", " + "[" + str(current_register) + "]"
            global_lines.append('{0:20}{1:5}'.format(line, comment))

        if operation == 'EQUAL':
            values = []
            if type(operand1) == str:
                operand1 = reverse_register_dictionary[operand1]
            if type(operand2) == str:
                operand2 = reverse_register_dictionary[operand2]

            if result in reverse_register_dictionary:
                result = reverse_register_dictionary[result]
            else:
                if type(result) == str:
                    values.append(result)
                    register_allocation_output = RegisterAllocation.allocate(values, register_dictionary, reverse_register_dictionary, clear)
                    values = register_allocation_output[0]    
                    register_dictionary = copy.copy(register_allocation_output[1])
                    reverse_register_dictionary = copy.copy(register_allocation_output[2])
                    clear = register_allocation_output[3]
                    result = values[0]
                    result = reverse_register_dictionary[result]             
                line = "\tset " + str(result) + ", " + str(result)
                global_lines.append(line)
            line = "\tcmp " +	str(operand1) + ", " + str(operand2) + ", " + str(result)
            global_lines.append('{0:20}{1:5}'.format(line, comment))
            compare_list.append("be")

        if operation == 'GREATERTHAN':
            values = []
            if type(operand1) == str:
                operand1 = reverse_register_dictionary[operand1]
            if type(operand2) == str:
                operand2 = reverse_register_dictionary[operand2]
            if result in reverse_register_dictionary:
                result = reverse_register_dictionary[result]
            else:
                if type(result) == str:
                    values.append(result)
                    register_allocation_output = RegisterAllocation.allocate(values, register_dictionary, reverse_register_dictionary, clear)
                    values = register_allocation_output[0]    
                    register_dictionary = copy.copy(register_allocation_output[1])
                    reverse_register_dictionary = copy.copy(register_allocation_output[2])
                    clear = register_allocation_output[3]
                    result = values[0]
                    result = reverse_register_dictionary[result]
                line = "\tset " + str(current_register) + ", " + str(current_register)
                global_lines.append(line)
            line = "\tcmp " +	str(operand1) + ", " + str(operand2) + ", " + str(current_register)
            global_lines.append('{0:20}{1:5}'.format(line, comment))
            compare_list.append("bg")

        if operation == 'IADD':
            values = []
            if type(operand1) == str:
                operand1 = reverse_register_dictionary[operand1]
            if type(operand2) == str:
                operand2 = reverse_register_dictionary[operand2]
            if result in reverse_register_dictionary:
                result = reverse_register_dictionary[result]
            else:
                values.append(result)
                register_allocation_output = RegisterAllocation.allocate(values, register_dictionary, reverse_register_dictionary, clear)
                values = register_allocation_output[0]    
                register_dictionary = copy.copy(register_allocation_output[1])
                reverse_register_dictionary = copy.copy(register_allocation_output[2])
                clear = register_allocation_output[3]
                current_register = reverse_register_dictionary[result]
            line = "\tadd " +	str(operand1) + ", " + str(operand2) + ", " + str(current_register)
            global_lines.append('{0:20}{1:5}'.format(line, comment))

        if operation == 'CALL':
            if operand1 == 'printf':
                printed = printed + 1
                line = "\tset msg" + str(printed) + ", %o0"
                global_lines.append(line)
                fmt = ": .asciz " + repr('%d\n')
                line = "msg" + str(printed) + fmt
                read_only_date_lines.append('{0:20}{1:5}'.format(line, comment))
            else:
                line = "\tcall " + str(operand1)
                global_lines.append('{0:20}{1:5}'.format(line, comment))
                line = "\tnop"
                global_lines.append(line)

        ## Conditional Jump(for statements)
        if operation == 'CJUMP':
            if result in reverse_register_dictionary:
                result = reverse_register_dictionary[result]            
            line = "\t" + str(compare_list.pop(0)) + " " + result
            global_lines.append('{0:20}{1:5}'.format(line, comment))
            line = "\tnop"
            global_lines.append(line)
            if result == current_label:
                clear_register_output = ClearRegister.clear_current_register(register_dictionary, reverse_register_dictionary, clear)
                current_registers = clear_register_output[0]    
                register_dictionary = copy.copy(clear_register_output[1])
                reverse_register_dictionary = copy.copy(clear_register_output[2])
                clear = clear_register_output[3]
                appendage_comment = "\t!Clearing all registers at label"
                for i in range(len(current_registers)):
                    line = "\tclr " + str(current_registers[i]) + str(appendage_comment)
                    global_lines.append(line) 

        ## Conditional Jump(if statements)   
        if operation == 'CJUMPF':
            if result in reverse_register_dictionary:
                result = reverse_register_dictionary[result]            
            line = "\t" + str(compare_list.pop(0)) + " " + result
            global_lines.append('{0:20}{1:5}'.format(line, comment))
            line = "\tnop"
            global_lines.append(line)
            if result == current_label:
                clear_register_output = ClearRegister.clear_current_register(register_dictionary, reverse_register_dictionary, clear)
                current_registers = clear_register_output[0]    
                register_dictionary = copy.copy(clear_register_output[1])
                reverse_register_dictionary = copy.copy(clear_register_output[2])
                clear = clear_register_output[3]
                appendage_comment = "\t!Clearing all registers at label"
                for i in range(len(current_registers)):
                    line = "\tclr " + str(current_registers[i]) + str(appendage_comment)
                    global_lines.append(line)

        ## Hard jump
        if operation == 'JUMP':           
            if result in reverse_register_dictionary:
                result = reverse_register_dictionary[result]            
            line = "\tba " + str(result)
            global_lines.append('{0:20}{1:5}'.format(line, comment))
            line = "\tnop"
            global_lines.append(line)
            if result == current_label:
                clear_register_output = ClearRegister.clear_current_register(register_dictionary, reverse_register_dictionary, clear)
                current_registers = clear_register_output[0]    
                register_dictionary = copy.copy(clear_register_output[1])
                reverse_register_dictionary = copy.copy(clear_register_output[2])
                clear = clear_register_output[3]
                appendage_comment = "\t!Clearing all registers at label"
                for i in range(len(current_registers)):
                    line = "\tclr " + str(current_registers[i]) + str(appendage_comment)
                    global_lines.append(line)

        if operation == 'OUTPUTPARAMETER':
            if operand1 in reverse_register_dictionary:
                operand1 = reverse_register_dictionary[operand1]
            line = "\tmov " + str(operand1) + ", %o1"
            global_lines.append('{0:20}{1:5}'.format(line, comment))
            line = "\tcall printf"
            global_lines.append(line)
            line = "\tnop"
            global_lines.append(line)

        if operation == 'MEMORY':
            ## Vector with number of elements
            if operand1 != "-":
                if operand2 == "-":
                    skip_number = 4 * int(operand1)
                    line = str(result) + ":	.skip " + str(skip_number)
                    undeclared_lines.append('{0:20}{1:5}'.format(line, comment))

        if operation == 'PROCEDUREBEGIN':
            line = str(operand1) + ": save, %sp, -120, %sp"
            global_lines.append('{0:20}{1:5}'.format(line, comment))
            procedure_declaration = True

        if operation == 'ENDPROCEDURE':                
            line = "\tret"
            global_lines.append(line)
            line = "\trestore"
            global_lines.append('{0:20}{1:5}'.format(line, comment))
            procedure_declaration = False

        if operation == 'ENDCOMPUTATION':                
            line = "\tret"
            global_lines.append('{0:20}{1:5}'.format(line, comment))
            line = "\trestore"
            global_lines.append(line)         

    ## Final assembly
    for i in range(len(global_lines)):
        assembly_code.append(global_lines[i])
    if len(data_lines) > 1:
        for i in range(len(data_lines)):
            assembly_code.append(data_lines[i])

    if len(undeclared_lines) > 2:
        for i in range(len(undeclared_lines)):
            assembly_code.append(undeclared_lines[i])

    if len(read_only_date_lines) > 1:    
        for i in range(len(read_only_date_lines)):
            assembly_code.append(read_only_date_lines[i])

    return assembly_code

if __name__ == generate:
    generate
